import { jsxs as _jsxs, jsx as _jsx } from "react/jsx-runtime";
const PreviewTable = ({ data }) => {
    var _a, _b, _c, _d;
    const totalStyles = (((_a = data.paintStyles) === null || _a === void 0 ? void 0 : _a.length) || 0) +
        (((_b = data.textStyles) === null || _b === void 0 ? void 0 : _b.length) || 0) +
        (((_c = data.effectStyles) === null || _c === void 0 ? void 0 : _c.length) || 0) +
        (((_d = data.gridStyles) === null || _d === void 0 ? void 0 : _d.length) || 0);
    return (_jsxs("div", { className: "preview-table", children: [_jsxs("div", { className: "preview-summary", children: [_jsxs("h3", { children: ["Styles to be processed: ", totalStyles] }), _jsxs("div", { className: "preview-counts", children: [data.paintStyles && data.paintStyles.length > 0 && (_jsxs("span", { className: "count-item", children: ["\uD83C\uDFA8 ", data.paintStyles.length, " Paint Styles"] })), data.textStyles && data.textStyles.length > 0 && (_jsxs("span", { className: "count-item", children: ["\uD83D\uDCDD ", data.textStyles.length, " Text Styles"] })), data.effectStyles && data.effectStyles.length > 0 && (_jsxs("span", { className: "count-item", children: ["\u2728 ", data.effectStyles.length, " Effect Styles"] })), data.gridStyles && data.gridStyles.length > 0 && (_jsxs("span", { className: "count-item", children: ["\uD83D\uDCD0 ", data.gridStyles.length, " Grid Styles"] }))] })] }), _jsxs("div", { className: "preview-details", children: [data.paintStyles && data.paintStyles.length > 0 && (_jsxs("div", { className: "preview-section", children: [_jsx("h4", { children: "Paint Styles" }), _jsx("div", { className: "preview-list", children: data.paintStyles.map((style, index) => (_jsxs("div", { className: "preview-item", children: [_jsx("span", { className: "item-name", children: style.name }), _jsx("span", { className: "item-type", children: "Paint" })] }, index))) })] })), data.textStyles && data.textStyles.length > 0 && (_jsxs("div", { className: "preview-section", children: [_jsx("h4", { children: "Text Styles" }), _jsx("div", { className: "preview-list", children: data.textStyles.map((style, index) => (_jsxs("div", { className: "preview-item", children: [_jsx("span", { className: "item-name", children: style.name }), _jsx("span", { className: "item-type", children: "Text" })] }, index))) })] })), data.effectStyles && data.effectStyles.length > 0 && (_jsxs("div", { className: "preview-section", children: [_jsx("h4", { children: "Effect Styles" }), _jsx("div", { className: "preview-list", children: data.effectStyles.map((style, index) => (_jsxs("div", { className: "preview-item", children: [_jsx("span", { className: "item-name", children: style.name }), _jsx("span", { className: "item-type", children: "Effect" })] }, index))) })] })), data.gridStyles && data.gridStyles.length > 0 && (_jsxs("div", { className: "preview-section", children: [_jsx("h4", { children: "Grid Styles" }), _jsx("div", { className: "preview-list", children: data.gridStyles.map((style, index) => (_jsxs("div", { className: "preview-item", children: [_jsx("span", { className: "item-name", children: style.name }), _jsx("span", { className: "item-type", children: "Grid" })] }, index))) })] }))] })] }));
};
export default PreviewTable;
